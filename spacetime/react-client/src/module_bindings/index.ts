// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AdvancePackageState } from "./advance_package_state_reducer.ts";
export { AdvancePackageState };
import { CreateTravelOrder } from "./create_travel_order_reducer.ts";
export { CreateTravelOrder };
import { Init } from "./init_reducer.ts";
export { Init };
import { UpdateArticleStatus } from "./update_article_status_reducer.ts";
export { UpdateArticleStatus };

// Import and reexport all table handle types
import { ArticleTableHandle } from "./article_table.ts";
export { ArticleTableHandle };
import { DepositTableHandle } from "./deposit_table.ts";
export { DepositTableHandle };
import { PackageTableHandle } from "./package_table.ts";
export { PackageTableHandle };
import { TransportLogTableHandle } from "./transport_log_table.ts";
export { TransportLogTableHandle };

// Import and reexport all types
import { Article } from "./article_type.ts";
export { Article };
import { Deposit } from "./deposit_type.ts";
export { Deposit };
import { Package } from "./package_type.ts";
export { Package };
import { TransportLog } from "./transport_log_type.ts";
export { TransportLog };

const REMOTE_MODULE = {
  tables: {
    article: {
      tableName: "article",
      rowType: Article.getTypeScriptAlgebraicType(),
      primaryKey: "articleId",
    },
    deposit: {
      tableName: "deposit",
      rowType: Deposit.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    package: {
      tableName: "package",
      rowType: Package.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    transport_log: {
      tableName: "transport_log",
      rowType: TransportLog.getTypeScriptAlgebraicType(),
      primaryKey: "logId",
    },
  },
  reducers: {
    AdvancePackageState: {
      reducerName: "AdvancePackageState",
      argsType: AdvancePackageState.getTypeScriptAlgebraicType(),
    },
    CreateTravelOrder: {
      reducerName: "CreateTravelOrder",
      argsType: CreateTravelOrder.getTypeScriptAlgebraicType(),
    },
    Init: {
      reducerName: "Init",
      argsType: Init.getTypeScriptAlgebraicType(),
    },
    UpdateArticleStatus: {
      reducerName: "UpdateArticleStatus",
      argsType: UpdateArticleStatus.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AdvancePackageState", args: AdvancePackageState }
| { name: "CreateTravelOrder", args: CreateTravelOrder }
| { name: "Init", args: Init }
| { name: "UpdateArticleStatus", args: UpdateArticleStatus }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  advancePackageState(packageId: string, newState: string) {
    const __args = { packageId, newState };
    let __writer = new BinaryWriter(1024);
    AdvancePackageState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AdvancePackageState", __argsBuffer, this.setCallReducerFlags.advancePackageStateFlags);
  }

  onAdvancePackageState(callback: (ctx: ReducerEventContext, packageId: string, newState: string) => void) {
    this.connection.onReducer("AdvancePackageState", callback);
  }

  removeOnAdvancePackageState(callback: (ctx: ReducerEventContext, packageId: string, newState: string) => void) {
    this.connection.offReducer("AdvancePackageState", callback);
  }

  createTravelOrder(sourceDepotId: number, destDepotId: number) {
    const __args = { sourceDepotId, destDepotId };
    let __writer = new BinaryWriter(1024);
    CreateTravelOrder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateTravelOrder", __argsBuffer, this.setCallReducerFlags.createTravelOrderFlags);
  }

  onCreateTravelOrder(callback: (ctx: ReducerEventContext, sourceDepotId: number, destDepotId: number) => void) {
    this.connection.onReducer("CreateTravelOrder", callback);
  }

  removeOnCreateTravelOrder(callback: (ctx: ReducerEventContext, sourceDepotId: number, destDepotId: number) => void) {
    this.connection.offReducer("CreateTravelOrder", callback);
  }

  init() {
    this.connection.callReducer("Init", new Uint8Array(0), this.setCallReducerFlags.initFlags);
  }

  onInit(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Init", callback);
  }

  removeOnInit(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Init", callback);
  }

  updateArticleStatus(articleId: string, newStatus: string) {
    const __args = { articleId, newStatus };
    let __writer = new BinaryWriter(1024);
    UpdateArticleStatus.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateArticleStatus", __argsBuffer, this.setCallReducerFlags.updateArticleStatusFlags);
  }

  onUpdateArticleStatus(callback: (ctx: ReducerEventContext, articleId: string, newStatus: string) => void) {
    this.connection.onReducer("UpdateArticleStatus", callback);
  }

  removeOnUpdateArticleStatus(callback: (ctx: ReducerEventContext, articleId: string, newStatus: string) => void) {
    this.connection.offReducer("UpdateArticleStatus", callback);
  }

}

export class SetReducerFlags {
  advancePackageStateFlags: CallReducerFlags = 'FullUpdate';
  advancePackageState(flags: CallReducerFlags) {
    this.advancePackageStateFlags = flags;
  }

  createTravelOrderFlags: CallReducerFlags = 'FullUpdate';
  createTravelOrder(flags: CallReducerFlags) {
    this.createTravelOrderFlags = flags;
  }

  initFlags: CallReducerFlags = 'FullUpdate';
  init(flags: CallReducerFlags) {
    this.initFlags = flags;
  }

  updateArticleStatusFlags: CallReducerFlags = 'FullUpdate';
  updateArticleStatus(flags: CallReducerFlags) {
    this.updateArticleStatusFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get article(): ArticleTableHandle {
    return new ArticleTableHandle(this.connection.clientCache.getOrCreateTable<Article>(REMOTE_MODULE.tables.article));
  }

  get deposit(): DepositTableHandle {
    return new DepositTableHandle(this.connection.clientCache.getOrCreateTable<Deposit>(REMOTE_MODULE.tables.deposit));
  }

  get package(): PackageTableHandle {
    return new PackageTableHandle(this.connection.clientCache.getOrCreateTable<Package>(REMOTE_MODULE.tables.package));
  }

  get transportLog(): TransportLogTableHandle {
    return new TransportLogTableHandle(this.connection.clientCache.getOrCreateTable<TransportLog>(REMOTE_MODULE.tables.transport_log));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
